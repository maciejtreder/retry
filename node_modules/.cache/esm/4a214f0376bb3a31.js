let RxHR,retry,delay,tap,catchError,of,throwError;_76b‍.w("@akanass/rx-http-request",[["RxHR",["RxHR"],function(v){RxHR=v}]]);_76b‍.w("rxjs/operators",[["retry",["retry"],function(v){retry=v}],["delay",["delay"],function(v){delay=v}],["tap",["tap"],function(v){tap=v}],["catchError",["catchError"],function(v){catchError=v}]]);_76b‍.w("rxjs",[["of",["of"],function(v){of=v}],["throwError",["throwError"],function(v){throwError=v}]]);



async function getAndRetry(url, retryCount) {
    return RxHR.get(url).pipe(
        catchError(error => {
            console.log('error in the observable');
            return throwError(error);
        }),
        delay(1500),
        retry(retryCount),
    ).toPromise();
}

(async () => {
    try {
        const results = await getAndRetry('http://non-existing.com', 3);
        _76b‍.g.console.log(results);
    } catch(error) {
        console.log('error catched');
    }


})();